from aiogram import types
from createTGBot import bot, dp
from DataBase import sqlite_dataBase
from aiogram.dispatcher import FSMContext
from handlers import states
from keyboards import keyboard
from handlers.admin_side import add_proxy_data


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    all_users_id = [id_[0] for id_ in await sqlite_dataBase.get_all_users()]
    if message.from_user.id not in all_users_id:
        await sqlite_dataBase.add_user(message.from_user.id)

    await bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. '
                                            '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∞–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ask_question')
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É—á–∏—Ç–µ—Å—å: ',
                           reply_markup=keyboard.group_keyboard(await sqlite_dataBase.get_all_groups()))
    await states.StartStates.group_name.set()


@dp.message_handler(commands=['schedule'])
async def send_my_schedule(message: types.Message):
    user_data = [u for u in await sqlite_dataBase.get_all_users() if u[0] == message.from_user.id]
    if not user_data or not user_data[0][1] or user_data[0][1] == 'no_group':
        await message.reply("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /select_group –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
        return

    group_name = user_data[0][1]
    group_data = await sqlite_dataBase.get_group(group_name)

    if not group_data or not group_data[0][1]:
        await message.reply(f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_name} –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return

    schedule_text = group_data[0][1]
    await message.reply(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}*:\n\n{schedule_text}", parse_mode='Markdown')


@dp.message_handler(state=states.StartStates.group_name)
async def start_state(message: types.Message, state: FSMContext):
    all_group_names = [_[0] for _ in await sqlite_dataBase.get_all_groups()]
    if message.text in all_group_names:
        await sqlite_dataBase.change_user_group(message.from_user.id, message.text)
        await bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ. –Ø –∑–∞–∫—Ä–µ–ø–∏–ª –≤–∞—Å –∫ –≥—Ä—É–ø–ø–µ {message.text}',
                               reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(commands=['select_group'])
async def select_group_command(message: types.Message):
    all_groups = await sqlite_dataBase.get_all_groups()
    group_kb = keyboard.group_keyboard(all_groups)
    await message.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', reply=False,
                        reply_markup=group_kb)
    await states.SelectGroupStates.group_name.set()


@dp.message_handler(state=states.SelectGroupStates.group_name)
async def select_group_state(message: types.Message, state: FSMContext):
    all_group_names = [_[0] for _ in await sqlite_dataBase.get_all_groups()]
    if message.text in all_group_names:
        await sqlite_dataBase.change_user_group(message.from_user.id, message.text)
        await bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ. –ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞',
                               reply_markup=types.ReplyKeyboardRemove())
    else:
        await bot.send_message(message.chat.id, '–ì—Ä—É–ø–ø—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±—Ä–∞–ª–∏, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                               reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(commands=['delete_me_from_group'])
async def delete_from_group(message: types.Message):
    await sqlite_dataBase.change_user_group(message.from_user.id, None)
    await message.reply('–•–æ—Ä–æ—à–æ. –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞', reply=False)


@dp.message_handler(commands=['news', '–Ω–æ–≤–æ—Å—Ç–∏'])
async def news_command(message: types.Message):
    news = await sqlite_dataBase.get_news()
    for i in news[:3]:
        await bot.send_photo(message.chat.id, i[3], f'*{i[1]}*\n\n{i[2]}',
                             parse_mode='Markdown')


@dp.message_handler(commands=['ask_question'])
async def ask_question_command(message: types.Message):
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', reply=False)
    await states.AskQuestionStates.get_question.set()


@dp.message_handler(state=states.AskQuestionStates.get_question)
async def get_question_state(message: types.Message, state: FSMContext):
    await add_proxy_data(state, {
        'user_id': message.from_user.id,
        'question': message.text,
        'nickname': message.from_user.username,
    })
    await sqlite_dataBase.add_question(state)
    await message.reply('–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...', reply=False)
    await state.finish()


@dp.message_handler(commands=['id'])
async def get_group_id(message: types.Message, state: FSMContext):
    await message.reply(message.chat.id)